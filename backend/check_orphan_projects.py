#!/usr/bin/env python3
"""
Script para verificar proyectos hu√©rfanos (sin propietario v√°lido).
"""

from sqlalchemy.orm import Session
from sqlalchemy import text
from app.database import SessionLocal
from app.models.project import Project
from app.models.user import User

def check_orphan_projects():
    """Verificar proyectos sin propietario v√°lido"""
    db = SessionLocal()
    
    try:
        # Obtener todos los proyectos
        all_projects = db.query(Project).all()
        print(f"üìä Total de proyectos en BD: {len(all_projects)}")
        
        # Obtener todos los IDs de usuarios v√°lidos
        valid_user_ids = [user.id for user in db.query(User).all()]
        print(f"üë• IDs de usuarios v√°lidos: {valid_user_ids}")
        print()
        
        # Verificar proyectos hu√©rfanos
        orphan_projects = []
        valid_projects = []
        
        for project in all_projects:
            if project.owner_id not in valid_user_ids:
                orphan_projects.append(project)
            else:
                valid_projects.append(project)
        
        print(f"üìÅ PROYECTOS V√ÅLIDOS: {len(valid_projects)}")
        print(f"üö´ PROYECTOS HU√âRFANOS: {len(orphan_projects)}")
        print()
        
        if orphan_projects:
            print("üö´ PROYECTOS HU√âRFANOS (sin propietario v√°lido):")
            print("-" * 60)
            
            # Agrupar por owner_id inv√°lido
            invalid_owners = {}
            for project in orphan_projects:
                if project.owner_id not in invalid_owners:
                    invalid_owners[project.owner_id] = []
                invalid_owners[project.owner_id].append(project)
            
            for owner_id, projects in invalid_owners.items():
                print(f"üë§ Owner ID inv√°lido: {owner_id} ({len(projects)} proyectos)")
                for project in projects[:3]:  # Mostrar solo los primeros 3
                    print(f"   üìÅ {project.name}")
                if len(projects) > 3:
                    print(f"   ... y {len(projects) - 3} m√°s")
                print()
        
        # Verificar si hay proyectos con owner_id NULL
        null_owner_count = db.execute(text("SELECT COUNT(*) FROM projects WHERE owner_id IS NULL")).scalar()
        print(f"üîç Proyectos con owner_id NULL: {null_owner_count}")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        db.close()

if __name__ == "__main__":
    check_orphan_projects()