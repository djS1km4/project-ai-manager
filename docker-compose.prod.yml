version: '3.8'

services:
  # Backend Service - Producción
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: project-ai-manager-backend-prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/project_ai_manager
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ENVIRONMENT=production
      - DEBUG=false
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - project-ai-network

  # Frontend Service - Producción
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: project-ai-manager-frontend-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - project-ai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: project-ai-manager-db-prod
    environment:
      POSTGRES_DB: project_ai_manager
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - project-ai-network

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: project-ai-manager-redis-prod
    restart: unless-stopped
    networks:
      - project-ai-network

  # Nginx Reverse Proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: project-ai-manager-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - project-ai-network

networks:
  project-ai-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local